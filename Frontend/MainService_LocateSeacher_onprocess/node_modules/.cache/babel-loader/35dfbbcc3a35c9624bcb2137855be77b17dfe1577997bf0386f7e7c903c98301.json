{"ast":null,"code":"import React from \"react\";\nexport const DateCalculator = props => {\n  const Define_Today = () => {\n    const Today_Y = new Date().getFullYear();\n    const Today_M = new Date().getMonth();\n    const Today_D = new Date().getDate();\n    return {\n      Year: Today_Y,\n      Month: Today_M,\n      Date: Today_D\n    };\n  };\n  const Status_Definer = (origin, target) => {\n    const ORIGIN = Number(origin);\n    const TARGET = Number(target);\n    if (ORIGIN < TARGET) {\n      return {\n        Gap: TARGET - ORIGIN,\n        status: '+',\n        message: 'Target_data is ahead then Origin_data'\n      };\n    }\n    if (ORIGIN > TARGET) {\n      return {\n        Gap: ORIGIN - TARGET,\n        status: '-',\n        message: 'Target_data is older_data then Origin_data'\n      };\n    }\n    if (ORIGIN === TARGET) {\n      return {\n        Gap: 0,\n        status: '=',\n        message: 'Target_data is same as Origin_data'\n      };\n    } else {\n      return;\n    }\n  };\n  const CompareYMD = async (section, target) => {\n    const Today_Data = Define_Today();\n    switch (section) {\n      case 'Year':\n        return Status_Definer(Today_Data.Year, target);\n      case 'Month':\n        return Status_Definer(Today_Data.Month, target);\n      case 'Date':\n        return Status_Definer(Today_Data.Date, target);\n      default:\n        return;\n    }\n  };\n  const CompareProcess = async target => {\n    const Yeardata = await CompareYMD('Year', target.Year);\n    const Monthdata = await CompareYMD('Month', target.Month);\n    const Datedata = await CompareYMD('Date', target.Date);\n    return {\n      Year: Yeardata,\n      Month: Monthdata,\n      Date: Datedata\n    };\n  };\n  if (typeof props.date != 'undefined') {\n    const Timeline_Data = props.date.split(/T|Z/);\n    const Target_Data = {\n      Year: Timeline_Data[0].split('-')[0],\n      Month: Timeline_Data[0].split('-')[1],\n      Date: Timeline_Data[0].split('-')[2],\n      Time: Timeline_Data[1]\n    };\n    CompareProcess(Target_Data).then(result => {\n      console.log(typeof result.Year.Gap);\n      if (result.Year.Gap === 0) {\n        return;\n      }\n    });\n  } else {\n    console.log(props);\n    return;\n  }\n};\n_c = DateCalculator;\nexport default DateCalculator;\nvar _c;\n$RefreshReg$(_c, \"DateCalculator\");","map":{"version":3,"names":["React","DateCalculator","props","Define_Today","Today_Y","Date","getFullYear","Today_M","getMonth","Today_D","getDate","Year","Month","Status_Definer","origin","target","ORIGIN","Number","TARGET","Gap","status","message","CompareYMD","section","Today_Data","CompareProcess","Yeardata","Monthdata","Datedata","date","Timeline_Data","split","Target_Data","Time","then","result","console","log","_c","$RefreshReg$"],"sources":["C:/Users/ereh0/OneDrive/문서/개발/food_script_2.0.0/Develop/Frontend/MainService_LocateSeacher_onprocess/src/0_component/Personalized_Data_Page/Personailized_Data_ReflectZone/DateCalculator.js"],"sourcesContent":["import React from \"react\";\r\n\r\nexport const DateCalculator = (props) => {\r\n\r\n    const Define_Today = () =>{\r\n\r\n        const Today_Y = new Date().getFullYear()\r\n        const Today_M = new Date().getMonth()\r\n        const Today_D = new Date().getDate()\r\n    \r\n        return {\r\n            Year : Today_Y,\r\n            Month : Today_M,\r\n            Date : Today_D\r\n        }\r\n    }\r\n    \r\n    const Status_Definer = (origin, target) => {\r\n    \r\n        const ORIGIN = Number(origin)\r\n        const TARGET = Number(target)\r\n\r\n        if(ORIGIN < TARGET){\r\n           return{\r\n                Gap: TARGET-ORIGIN,\r\n                status: '+',\r\n                message: 'Target_data is ahead then Origin_data'\r\n           }\r\n        }\r\n        if(ORIGIN > TARGET){\r\n            return{\r\n                Gap: ORIGIN-TARGET,\r\n                status: '-',\r\n                message: 'Target_data is older_data then Origin_data'\r\n            }\r\n        }\r\n        if(ORIGIN === TARGET){\r\n            return{\r\n                Gap: 0,\r\n                status: '=',\r\n                message: 'Target_data is same as Origin_data'}\r\n        }\r\n        else{\r\n            return;\r\n        }\r\n    \r\n    \r\n    }\r\n    \r\n    const CompareYMD = async (section, target) =>{\r\n    \r\n        const Today_Data = Define_Today();\r\n    \r\n        switch(section){\r\n            case('Year'):\r\n            return Status_Definer(Today_Data.Year, target);\r\n    \r\n            case('Month'):\r\n            return Status_Definer(Today_Data.Month, target);\r\n    \r\n            case('Date'):\r\n            return Status_Definer(Today_Data.Date, target);\r\n    \r\n            default:\r\n            return;\r\n        }\r\n    }\r\n    \r\n    const CompareProcess = async (target) =>{\r\n\r\n        const Yeardata = await CompareYMD('Year', target.Year)\r\n        const Monthdata = await CompareYMD('Month', target.Month)\r\n        const Datedata = await CompareYMD('Date', target.Date)\r\n\r\n        return {\r\n            Year: Yeardata,\r\n            Month: Monthdata,\r\n            Date: Datedata\r\n        }\r\n    }\r\n\r\n\r\n    if(typeof props.date != 'undefined'){\r\n        const Timeline_Data = props.date.split(/T|Z/)\r\n\r\n        const Target_Data = {\r\n            Year: Timeline_Data[0].split('-')[0],\r\n            Month: Timeline_Data[0].split('-')[1],\r\n            Date: Timeline_Data[0].split('-')[2],\r\n            Time: Timeline_Data[1]\r\n        }\r\n\r\n        CompareProcess(Target_Data).then((result)=>{\r\n            console.log(typeof result.Year.Gap)\r\n            if(result.Year.Gap === 0){return;}\r\n        })\r\n\r\n    }\r\n\r\n    else{\r\n        console.log(props)\r\n        return;\r\n    }\r\n\r\n}\r\n\r\nexport default DateCalculator;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}